FFI_Raw_t *			T_FFI_RAW
FFI_Raw_MemPtr_t *		T_FFI_RAW_MEMPTR
FFI_Raw_Callback_t *		T_FFI_RAW_CALLBACK

OUTPUT
T_FFI_RAW
	sv_setref_pv($arg, \"FFI::Platypus::Legacy::Raw\", (void *) $var);
T_FFI_RAW_MEMPTR
	sv_setref_pv($arg, \"FFI::Platypus::Legacy::Raw::MemPtr\", (void *) $var);
T_FFI_RAW_CALLBACK
	sv_setref_pv($arg, \"FFI::Platypus::Legacy::Raw::Callback\", (void *) $var);

INPUT
T_FFI_RAW
	if (sv_isobject($arg) && sv_derived_from($arg, \"FFI::Platypus::Legacy::Raw\"))
		$var = INT2PTR($type, SvIV((SV *) SvRV($arg)));
	else
		Perl_croak(aTHX_ \"$var is not of type FFI::Platypus::Legacy::Raw\");
T_FFI_RAW_MEMPTR
	if (sv_isobject($arg) && sv_derived_from($arg, \"FFI::Platypus::Legacy::Raw::MemPtr\"))
		$var = INT2PTR($type, SvIV((SV *) SvRV($arg)));
	else
		Perl_croak(aTHX_ \"$var is not of type FFI::Platypus::Legacy::Raw::MemPtr\");
T_FFI_RAW_CALLBACK
	if (sv_isobject($arg) && sv_derived_from($arg, \"FFI::Platypus::Legacy::Raw::Callback\"))
		$var = INT2PTR($type, SvIV((SV *) SvRV($arg)));
	else
		Perl_croak(aTHX_ \"$var is not of type FFI::Platypus::Legacy::Raw::Callback\");
